{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "rewrites": {
    "beforeFiles": [],
    "afterFiles": [],
    "fallback": []
  },
  "dynamicRoutes": [
    {
      "page": "/[countryCode]",
      "regex": "^/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPcountryCode": "nxtPcountryCode"
      },
      "namedRegex": "^/(?<nxtPcountryCode>[^/]+?)(?:/)?$"
    },
    {
      "page": "/[countryCode]/account",
      "regex": "^/([^/]+?)/account(?:/)?$",
      "routeKeys": {
        "nxtPcountryCode": "nxtPcountryCode"
      },
      "namedRegex": "^/(?<nxtPcountryCode>[^/]+?)/account(?:/)?$"
    },
    {
      "page": "/[countryCode]/account/addresses",
      "regex": "^/([^/]+?)/account/addresses(?:/)?$",
      "routeKeys": {
        "nxtPcountryCode": "nxtPcountryCode"
      },
      "namedRegex": "^/(?<nxtPcountryCode>[^/]+?)/account/addresses(?:/)?$"
    },
    {
      "page": "/[countryCode]/account/orders",
      "regex": "^/([^/]+?)/account/orders(?:/)?$",
      "routeKeys": {
        "nxtPcountryCode": "nxtPcountryCode"
      },
      "namedRegex": "^/(?<nxtPcountryCode>[^/]+?)/account/orders(?:/)?$"
    },
    {
      "page": "/[countryCode]/account/orders/details/[id]",
      "regex": "^/([^/]+?)/account/orders/details/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPcountryCode": "nxtPcountryCode",
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/(?<nxtPcountryCode>[^/]+?)/account/orders/details/(?<nxtPid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/[countryCode]/account/profile",
      "regex": "^/([^/]+?)/account/profile(?:/)?$",
      "routeKeys": {
        "nxtPcountryCode": "nxtPcountryCode"
      },
      "namedRegex": "^/(?<nxtPcountryCode>[^/]+?)/account/profile(?:/)?$"
    },
    {
      "page": "/[countryCode]/cart",
      "regex": "^/([^/]+?)/cart(?:/)?$",
      "routeKeys": {
        "nxtPcountryCode": "nxtPcountryCode"
      },
      "namedRegex": "^/(?<nxtPcountryCode>[^/]+?)/cart(?:/)?$"
    },
    {
      "page": "/[countryCode]/categories/[...category]",
      "regex": "^/([^/]+?)/categories/(.+?)(?:/)?$",
      "routeKeys": {
        "nxtPcountryCode": "nxtPcountryCode",
        "nxtPcategory": "nxtPcategory"
      },
      "namedRegex": "^/(?<nxtPcountryCode>[^/]+?)/categories/(?<nxtPcategory>.+?)(?:/)?$"
    },
    {
      "page": "/[countryCode]/checkout",
      "regex": "^/([^/]+?)/checkout(?:/)?$",
      "routeKeys": {
        "nxtPcountryCode": "nxtPcountryCode"
      },
      "namedRegex": "^/(?<nxtPcountryCode>[^/]+?)/checkout(?:/)?$"
    },
    {
      "page": "/[countryCode]/collections/[handle]",
      "regex": "^/([^/]+?)/collections/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPcountryCode": "nxtPcountryCode",
        "nxtPhandle": "nxtPhandle"
      },
      "namedRegex": "^/(?<nxtPcountryCode>[^/]+?)/collections/(?<nxtPhandle>[^/]+?)(?:/)?$"
    },
    {
      "page": "/[countryCode]/order/[id]/confirmed",
      "regex": "^/([^/]+?)/order/([^/]+?)/confirmed(?:/)?$",
      "routeKeys": {
        "nxtPcountryCode": "nxtPcountryCode",
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/(?<nxtPcountryCode>[^/]+?)/order/(?<nxtPid>[^/]+?)/confirmed(?:/)?$"
    },
    {
      "page": "/[countryCode]/order/[id]/transfer/[token]",
      "regex": "^/([^/]+?)/order/([^/]+?)/transfer/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPcountryCode": "nxtPcountryCode",
        "nxtPid": "nxtPid",
        "nxtPtoken": "nxtPtoken"
      },
      "namedRegex": "^/(?<nxtPcountryCode>[^/]+?)/order/(?<nxtPid>[^/]+?)/transfer/(?<nxtPtoken>[^/]+?)(?:/)?$"
    },
    {
      "page": "/[countryCode]/order/[id]/transfer/[token]/accept",
      "regex": "^/([^/]+?)/order/([^/]+?)/transfer/([^/]+?)/accept(?:/)?$",
      "routeKeys": {
        "nxtPcountryCode": "nxtPcountryCode",
        "nxtPid": "nxtPid",
        "nxtPtoken": "nxtPtoken"
      },
      "namedRegex": "^/(?<nxtPcountryCode>[^/]+?)/order/(?<nxtPid>[^/]+?)/transfer/(?<nxtPtoken>[^/]+?)/accept(?:/)?$"
    },
    {
      "page": "/[countryCode]/order/[id]/transfer/[token]/decline",
      "regex": "^/([^/]+?)/order/([^/]+?)/transfer/([^/]+?)/decline(?:/)?$",
      "routeKeys": {
        "nxtPcountryCode": "nxtPcountryCode",
        "nxtPid": "nxtPid",
        "nxtPtoken": "nxtPtoken"
      },
      "namedRegex": "^/(?<nxtPcountryCode>[^/]+?)/order/(?<nxtPid>[^/]+?)/transfer/(?<nxtPtoken>[^/]+?)/decline(?:/)?$"
    },
    {
      "page": "/[countryCode]/products/[handle]",
      "regex": "^/([^/]+?)/products/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPcountryCode": "nxtPcountryCode",
        "nxtPhandle": "nxtPhandle"
      },
      "namedRegex": "^/(?<nxtPcountryCode>[^/]+?)/products/(?<nxtPhandle>[^/]+?)(?:/)?$"
    },
    {
      "page": "/[countryCode]/store",
      "regex": "^/([^/]+?)/store(?:/)?$",
      "routeKeys": {
        "nxtPcountryCode": "nxtPcountryCode"
      },
      "namedRegex": "^/(?<nxtPcountryCode>[^/]+?)/store(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/opengraph-image.jpg",
      "regex": "^/opengraph\\-image\\.jpg(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/opengraph\\-image\\.jpg(?:/)?$"
    },
    {
      "page": "/twitter-image.jpg",
      "regex": "^/twitter\\-image\\.jpg(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/twitter\\-image\\.jpg(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  }
}